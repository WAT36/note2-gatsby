{"componentChunkName":"component---src-templates-note-dir-js","path":"/notes/programming/013_procon/003_graph","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"allDirectory":{"nodes":[]},"allMarkdownRemark":{"nodes":[{"excerpt":"グラフはコード上でどのように表現して作ればよいのか？ ここではいくつか方法を示す。 隣接行列 まずは隣接行列という方法について。 グラフの頂点の数をVとしたときに初期値が全て0、大きさ|V|*|V|の２次元リスト(行列)Gを用意し、頂点iと頂点jが結ばれているときにG[i][j…","fields":{"slug":"/programming/013_procon/003_graph/graph/"},"frontmatter":{"date":"November 02, 2019","title":"グラフの表現方法","description":""}},{"excerpt":"前述のグラフの彩色問題において、彩色数(グラフの頂点を彩色するのに必要な最小の色数)が…","fields":{"slug":"/programming/013_procon/003_graph/bipartite_graph/"},"frontmatter":{"date":"November 02, 2019","title":"二部グラフ","description":""}},{"excerpt":"競プロでグラフの彩色問題が出てきたので、今回はグラフの頂点彩色問題について、復習がてら記事を書いてみる。 グラフの彩色 そもそもグラフの彩色とは何か？ グラフ彩色（英: Graph coloring…","fields":{"slug":"/programming/013_procon/003_graph/graph_coloring/"},"frontmatter":{"date":"November 02, 2019","title":"グラフの彩色問題 ～Welsh・Powellのアルゴリズム～","description":""}},{"excerpt":"ベルマンフォード法とは、最短路問題(ある点から他の全ての頂点との間の最短路を求める問題)を解く手法の一つである。 始点sから頂点iへの最短距離をd[i]とした時、以下の式が成り立つ。 初期値をd[s]=0,d[i]=INF…","fields":{"slug":"/programming/013_procon/003_graph/bellman_ford/"},"frontmatter":{"date":"November 02, 2019","title":"ベルマンフォード法","description":""}},{"excerpt":"経路探索アルゴリズムの一つ「ワーシャル・フロイド法」についてを調べてみた。 ワーシャル・フロイド法とは、グラフのある頂点からある頂点までの最短経路を全ての組み合わせにおいて探索するアルゴリズムである。 入力 グラフ G = (V,E) Eの各辺の重み(コスト) 出力 全ての頂点i…","fields":{"slug":"/programming/013_procon/003_graph/warshall_floyd/"},"frontmatter":{"date":"November 02, 2019","title":"ワーシャル・フロイド法","description":""}},{"excerpt":"…","fields":{"slug":"/programming/013_procon/003_graph/dijkstra/"},"frontmatter":{"date":"November 02, 2019","title":"ダイクストラ法","description":""}},{"excerpt":"無向グラフが与えられたときに、その内のある辺だけを用いてグラフ中の任意の２頂点を連結(ある頂点から他のどの頂点への経路が存在する)にした木のことを 全域木(Spanning Tree…","fields":{"slug":"/programming/013_procon/003_graph/minimum_spanning_tree/"},"frontmatter":{"date":"November 02, 2019","title":"最小全域木","description":""}},{"excerpt":"グラフにおける最大流・最小流問題についてを述べる。 以下に例題を示す。  まずは、貪欲法を用いて流せるところに目一杯データを流すという方法が考えられる。以下のアルゴリズムを考える。 流れているデータ量が最大に達していない辺のみを用いたsからt…","fields":{"slug":"/programming/013_procon/003_graph/network_flow/"},"frontmatter":{"date":"November 02, 2019","title":"ネットワークフロー","description":""}}]}},"pageContext":{"absolutePath":"/Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/013_procon/003_graph","markdownRegexPath":"//Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/013_procon/003_graph/[^/]*.md/"}},"staticQueryHashes":["2841359383","3257411868"]}