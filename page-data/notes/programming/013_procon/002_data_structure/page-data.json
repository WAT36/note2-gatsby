{"componentChunkName":"component---src-templates-note-dir-js","path":"/notes/programming/013_procon/002_data_structure","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"allDirectory":{"nodes":[]},"allMarkdownRemark":{"nodes":[{"excerpt":"Union-Find木について。 Union-Find木は要素のグループ分けを管理するデータ構造である。\n1つ以上の要素を含むグループが何個かあった時、次の事が行える。 2つのグループをマージする…","fields":{"slug":"/programming/013_procon/002_data_structure/union-find/"},"frontmatter":{"date":"November 01, 2019","title":"Union-Find木","description":""}},{"excerpt":"セグメント木は区間と二分木を組み合わせたようなデータ構造である。例えば長さ8のリストをセグメント木で表すと以下のようになる。  ここで、セグメント木の節点にどのようなデータを持たせるかによって、様々な機能を持つ木を作ることができる。 ここでは、RMQ(Range Minimum…","fields":{"slug":"/programming/013_procon/002_data_structure/segment_tree/"},"frontmatter":{"date":"November 01, 2019","title":"セグメント木","description":""}},{"excerpt":"Binary Indexed Tree(BIT)は、セグメント木を応用したデータ構造で、リスト(数列)anが与えられた時、次のことが行える。 iが与えられた時、a1…aiの和を計算する。 i,xが与えられた時、ai+=xとする。 BIT…","fields":{"slug":"/programming/013_procon/002_data_structure/binary_indexed_tree/"},"frontmatter":{"date":"November 01, 2019","title":"Binary Indexed Tree","description":""}},{"excerpt":"まずバケット法とは、列、または平面状に散らばったデータをバケットと呼ばれる単位に分割して、バケットにデータを管理させる方法である。例を以下に示す。  平方分割とは、n個の要素を√n個のバケットにまとめて管理する方法のことを言う。 ここでは、セグメント木の時と同様に、RMQ…","fields":{"slug":"/programming/013_procon/002_data_structure/bucket/"},"frontmatter":{"date":"November 01, 2019","title":"バケット法と平方分割","description":""}}]}},"pageContext":{"absolutePath":"/Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/013_procon/002_data_structure","markdownRegexPath":"//Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/013_procon/002_data_structure/[^/]*.md/"}},"staticQueryHashes":["2841359383","3257411868"]}