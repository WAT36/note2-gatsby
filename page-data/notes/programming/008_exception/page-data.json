{
    "componentChunkName": "component---src-templates-note-dir-js",
    "path": "/notes/programming/008_exception",
    "result": {"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"allDirectory":{"nodes":[]},"allMarkdownRemark":{"nodes":[{"excerpt":"実行時エラー(例外)のハンドリングを行うtry文についてを示す。 言語により微妙に呼び名が違うところがあるので注意。 Javaでは try-catch(-finally) 文で実行時エラー(例外)のハンドリングを行う。 記法は以下の通り。 Javaでは例外が発生しうる箇所をtry…","fields":{"slug":"/programming/008_exception/try/"},"frontmatter":{"date":"October 21, 2019","title":"例外処理(try文)","description":"try文を利用した例外処理の扱い方について"}},{"excerpt":"…","fields":{"slug":"/programming/008_exception/myexception/"},"frontmatter":{"date":"October 21, 2019","title":"例外を定義する","description":"自分で例外クラスを定義する方法について"}},{"excerpt":"例外(エラー)は実行時にコードの不備によりに起こるのみではなく、（コード中で）自分で意図的に発生させることもできる。ここではその方法についてを示す。 Javaでは throw 文を使うことで指定した例外を発生することができる。 使用例 実行例を以下に示す。 実行結果 Python…","fields":{"slug":"/programming/008_exception/throw/"},"frontmatter":{"date":"October 21, 2019","title":"例外の明示的な発生","description":"例外を発生させる方法について"}}]}},"pageContext":{"absolutePath":"/Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/008_exception","markdownRegexPath":"//Users/watarutsukagoshi/Desktop/WTFiles/gatsby-blog/wat-note2/content/notes/programming/008_exception/[^/]*.md/"}},
    "staticQueryHashes": ["2841359383","3257411868"]}