{"componentChunkName":"component---src-templates-blog-post-js","path":"/log4js/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"49f49251-9cd9-5588-850b-2a3357d336a5","excerpt":"現在Reactでのアプリを作っていて、ログ出力をどうしようかと悩んでいたが、\nNode.jsでログ出力を行える「log4js」というフレームワークがあると聞いたので、それについて調べてみた。 log4jsとは log4jsとは、Node.js…","html":"<p>現在Reactでのアプリを作っていて、ログ出力をどうしようかと悩んでいたが、\nNode.jsでログ出力を行える「log4js」というフレームワークがあると聞いたので、それについて調べてみた。</p>\n<h1>log4jsとは</h1>\n<p>log4jsとは、Node.jsでログ出力を行えるフレームワークである。</p>\n<p>コード中でログ出力を定義することで、ログの出力・記録を行える。ログは別ファイルに出力して保存したり、発生した日別にファイル分けして管理（ログローテーション）することが可能になる。</p>\n<h1>インストール</h1>\n<p>npmを利用しインストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install log4js</code></pre></div>\n<h1>Loggers(ロガーオブジェクト)</h1>\n<p>実際に利用するには、‘log4js’をインポートし、<strong>getLogger()</strong> メソッドを使いロガーオブジェクトを得て利用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">'log4js'</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>そこから、ロガーオブジェクトに対して設定をするか、別に保存した設定ファイルを読み込んで使う。</p>\n<p>ロガーオブジェクトのプロパティ・関数は以下に示す。</p>\n<h2>level（ログレベル）</h2>\n<p>ログ出力は、ログの内容によって重要度が指定された上で出力される。この重要度のことを<strong>ログレベル</strong>という。</p>\n<p>ログレベルを重要度順に並べたものは以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</code></pre></div>\n<p>そして、このロガーオブジェクトのプロパティ <strong>level</strong> にここで示したレベルの値を指定することで、どの重要度以上のログレベルを出力するかを指定できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">'all'</span></code></pre></div>\n<p>具体的に示せる値は以下の通り。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">値</th>\n<th align=\"left\">意味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">OFF</td>\n<td align=\"left\">ログファイルにログを出力しない。</td>\n</tr>\n<tr>\n<td align=\"left\">FATAL</td>\n<td align=\"left\">FATAL以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">ERROR</td>\n<td align=\"left\">ERROR以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">WARN</td>\n<td align=\"left\">WARN以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">INFO</td>\n<td align=\"left\">INFO以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">DEBUG</td>\n<td align=\"left\">DEBUG以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">TRACE</td>\n<td align=\"left\">TRACE以上のレベルのログを出力。</td>\n</tr>\n<tr>\n<td align=\"left\">ALL</td>\n<td align=\"left\">全てのログレベルの出力を行う</td>\n</tr>\n</tbody>\n</table>\n<h2>ロガーのカテゴリ分け</h2>\n<p>ロガーオブジェクトをカテゴリ分け、要はログ設定を分けて管理することができる。</p>\n<p>カテゴリ分けする際は、ロガーオブジェクト生成時にカテゴリ名を引数に入力する。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'カテゴリ名'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>何も指定しない場合、 default というカテゴリになる。</p>\n<p>例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">'log4js'</span>\n\n<span class=\"token comment\">// 通常時(default)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">'all'</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info test messages'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 別のカテゴリでロガーオブジェクト定義(cheese)</span>\n<span class=\"token keyword\">const</span> cheeseLogger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cheese'</span><span class=\"token punctuation\">)</span>\ncheeseLogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">'all'</span>\ncheeseLogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info cheese fondu'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node test.js \n[2022-07-30T12:05:20.314] [INFO] default - info test messages\n[2022-07-30T12:05:20.319] [INFO] cheese - info cheese fondu</code></pre></div>\n<h2>ログの設定</h2>\n<p>ロガーの設定をjson形式で設定し、それを読み込むことで一挙に使える。</p>\n<p>設定を行うにはlog4jsの <strong>configure</strong> 関数で設定を行う。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">'log4js'</span>\n\nlog4js<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 設定を書く</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>configure 関数の中で行える設定内容を以下に示す。</p>\n<h3>appenders</h3>\n<p>appendersはログの出力処理を設定する。\n複数設定し、それぞれに名前をつけて管理することができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">'log4js'</span>\n\nlog4js<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">appenders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">out</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'stdout'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'application.log'</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>appenders内に設定できる主な項目は以下の通り。</p>\n<ul>\n<li>\n<p>type:ログ出力の設定。具体的に示す値は以下</p>\n<ul>\n<li>console: コンソール出力（ログレベル指定に関わらず全て出力）</li>\n<li>file: ログファイルを作りそこに出力。filename項目も指定する</li>\n<li>dateFile: 日付毎のログファイル作ってそこに出力。filename項目も指定する。またnumBackups項目で何日分まで保存できるかが決められる</li>\n<li>stdout: 標準出力（consoleと同じ？）</li>\n</ul>\n</li>\n<li>\n<p>numBackups: dateFileで利用する属性で、ログを何日分まで保存するかを定義する。(integer)</p>\n</li>\n<li>\n<p>filename: ログファイル名のプレフィクス</p>\n</li>\n<li>\n<p>pattern: dateFileでの日付毎のファイル名のパターン(yyyy-MM-ddなど)</p>\n</li>\n</ul>\n<h4>layouts</h4>\n<p>appendersに、layouts を指定することで、ログの出力形式を指定することができる。</p>\n<p>指定できる値を以下に示す。</p>\n<ul>\n<li>basic ：通常通り。タイムスタンプ、ログレベル、カテゴリ、内容</li>\n<li>coloured：レベルごとに色付きで表示できる（fileではやらないこと）</li>\n<li>messagePassThrough: ログの内容だけを表示</li>\n<li>pattern: ログメッセージの形式を指定できる。</li>\n</ul>\n<p>patternプロパティでは細かい出力項目、形式を定めることができる。</p>\n<p>例えば以下のような形式など。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pattern: \"%d %p %c %x{user} %m%n\",</code></pre></div>\n<h3>categories</h3>\n<p>categoriesでは先述のカテゴリに関する内容を設定することができる。</p>\n<p>ここで指定されたカテゴリを読み込んでログ出力を行うこともできる。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">'log4js'</span>\n\nlog4js<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">appenders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">out</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'stdout'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'application.log'</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">categories</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'stdout'</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">level</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token literal-property property\">logfile</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'application.log'</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// logfileカテゴリを読み込む</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logfile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>実際に利用する</h1>\n<p>ここまでの設定を行い、実際にlog4jsを使ってログ出力を行うにはどうするか？</p>\n<p>ログ出力を行いたいファイル内でロガーオブジェクトを作成、読み込み、ログ出力を行いたい場所で</p>\n<p><code class=\"language-text\">(ロガーオブジェクト).(ログレベル)(ログ出力内容)</code></p>\n<p>を行うことでログ出力が行える。</p>\n<p>例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> log4js <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log4js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ログ設定</span>\nlog4js<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">appenders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">out</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dateFile\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all-the-logs.log\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">pattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-yyyy-MM-dd\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">numBackups</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">categories</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">appenders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"out\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">level</span><span class=\"token operator\">:</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ロガーオブジェクト生成</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ログ出力</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I will be logged this as info in all-the-logs.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>出力例（ログファイル）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[2022-08-14T22:10:03.860] [INFO] default - I will be logged this as info in all-the-logs.log</code></pre></div>\n<h1>参考</h1>\n<p><a href=\"https://log4js-node.github.io/log4js-node/index.html\">https://log4js-node.github.io/log4js-node/index.html</a></p>","frontmatter":{"title":"Node.jsのロギングフレームワーク「log4js」","date":"July 31, 2022","description":"log4jsの利用法について"}},"previous":{"fields":{"slug":"/first_test/"},"frontmatter":{"title":"テスト投稿"}},"next":null},"pageContext":{"id":"49f49251-9cd9-5588-850b-2a3357d336a5","previousPostId":"f776580f-4c0b-5b74-88d2-56f829100d12","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}