{"componentChunkName":"component---src-templates-note-js","path":"/programming/007_class_func/001_class/constructor/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"5ffb7747-40e2-5905-8e35-5740cbd4d2a3","excerpt":"クラスのコンストラクタについてを書く。 コンストラクタとはクラスのインスタンスを作成した時に、そのインスタンスで最初に実行される関数である。主に初期化のために使われる。 これも言語により呼び名が違うので注意。 Java…","html":"<p>クラスのコンストラクタについてを書く。<br>\nコンストラクタとはクラスのインスタンスを作成した時に、そのインスタンスで最初に実行される関数である。主に初期化のために使われる。<br>\nこれも言語により呼び名が違うので注意。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p>Javaでは、クラス内でそのクラス名と同じ名前のメソッドを定義した時、それがコンストラクタになる。<br>\n引数を変えれば、多重定義（オーバーロード）でいくらでも定義できる。<br>\nただし、コンストラクタを定義したら、インスタンス生成時に設定する引数はそのコンストラクタと同じでなければならない。<br>\n因みにコンストラクタは定義しなくても良い。その場合インスタンス生成時に設定する引数は無しでないといけない。</p>\n<p>使用例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> owner <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> carname<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> carnumber<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> carowner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> carname<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> carnumber<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> carowner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Car</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lexus\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"100-1010\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ai-ueo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Car</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"carrola\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"200-2020\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kaki-kukeko\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Car1:\"</span><span class=\"token operator\">+</span>car1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>car1<span class=\"token punctuation\">.</span>number<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>car1<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Car2:\"</span><span class=\"token operator\">+</span>car2<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>car2<span class=\"token punctuation\">.</span>number<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>car2<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> java Main\nCar1:lexus 100-1010 ai-ueo\nCar2:carrola 200-2020 kaki-kukeko</code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p>Pythonでは　<strong>__init()__</strong> という関数がクラスのコンストラクタの役目を果たす。<br>\nクラスのインスタンス生成後、真っ先にこの関数__init__が実行される。<br>\n大体はインスタンス変数を設定するために利用されることが多い。そのときは__init__の引数に、変数に設定したい値に加えて<strong>self</strong>を追加することを忘れずに行う。</p>\n<p>実行例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>carname<span class=\"token punctuation\">,</span>carnumber<span class=\"token punctuation\">,</span>carowner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>carname\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             self<span class=\"token punctuation\">.</span>number<span class=\"token operator\">=</span>carnumber\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             self<span class=\"token punctuation\">.</span>owner<span class=\"token operator\">=</span>carowner\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> car1 <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"lexus\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"100-1010\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ai-ueo\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> car2 <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"carrola\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"200-2020\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kaki-kukeko\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>car1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>car1<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>car1<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token string\">'lexus'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100-1010'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ai-ueo'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>car2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>car2<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>car2<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'carrola'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'200-2020'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'kaki-kukeko'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Javascript\">\n<p>JavascriptでのコンストラクタはJavaやPythonのそれとは対象が微妙に異なる。</p>\n<p>まず、JavascriptにはJavaのクラスのといったデータ構造はないため、これに対するコンストラクタではない。</p>\n<p>しかし、Javascriptでは関数がクラスのようなデータ構造を表せることがあり、コンストラクタとはこれに対してのコンストラクタである。</p>\n<p>これを利用すると、関数の中身で指定されたプロパティを持ったオブジェクトが生成される。</p>\n<p>例えば以下の関数があったとする。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この関数を、<strong>new</strong>キーワードを用いて別の変数に格納すると、変数にはオブジェクト型のデータが格納される。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> john <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">john</code></pre></div>\n<p>何が起きているのだろうか？実は、newキーワードを使うと、指定された関数は以下の処理が追加されたような挙動を示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//var this={}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token comment\">//return this</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>newを追加することによって、関数をオブジェクトとして表すことが可能になる。</p>\n<p>javascriptでは、このnewで指定された関数のことを <strong>コンストラクタ</strong> と呼んでいる。また、コンストラクタにより生成されたオブジェクトを <strong>インスタンス</strong> と呼ぶ。</p>\n</div>","frontmatter":{"title":"コンストラクタ(  init  )","date":"October 19, 2019","description":"クラスのコンストラクタ(  init  )について","tags":["Java","Python","Javascript"]}}},"pageContext":{"id":"5ffb7747-40e2-5905-8e35-5740cbd4d2a3"}},"staticQueryHashes":["2841359383","3257411868"]}