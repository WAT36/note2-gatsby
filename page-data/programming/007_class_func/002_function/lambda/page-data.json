{"componentChunkName":"component---src-templates-note-js","path":"/programming/007_class_func/002_function/lambda/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"3e52dcce-6daf-5c57-b647-8026ca66fa34","excerpt":"ラムダ式（無名関数）についてを述べる。  Javaでは簡易的なメソッドを実装する方法としてラムダ式というのがある。 ラムダ式では、 関数型インターフェース の変数に、この記法で記述されたコードを代入する。 関数型インターフェースとは java.util.function…","html":"<p>ラムダ式（無名関数）についてを述べる。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p><code class=\"language-text\">( 実装するメソッドの引数 ) -> { 処理 }</code></p>\n<p>Javaでは簡易的なメソッドを実装する方法としてラムダ式というのがある。</p>\n<p>ラムダ式では、 <strong>関数型インターフェース</strong> の変数に、この記法で記述されたコードを代入する。<br>\n関数型インターフェースとは <strong>java.util.function</strong> に定義されているインターフェースであり、それぞれ用途があるが、共通して言えるのは定義されているのが抽象メソッド１つということである。この抽象メソッドをラムダ式で実装することによって利用する。</p>\n<p>記法について、引数には型名も基本必要だが、すでに定義している変数を使う場合は型名が省略できる。<br>\nまた、引数が１つの場合は()を省略できる。</p>\n<p><code class=\"language-text\">引数 -> { 処理 }</code></p>\n<p>ただし、引数が無い場合は()の省略はできない。</p>\n<p><code class=\"language-text\">() -> { 処理 }</code></p>\n<p>右辺において、処理が1文の場合は、{}の省略が可能。{}を省略している場合は、returnも省略可能。</p>\n<p><code class=\"language-text\">(引数) -> 処理</code></p>\n<p>実行例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Function</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Lambda:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implemented.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    func <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token string\">\"none() Lambda:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"implemented.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ java Main\nLambda:implemented.\nnone() Lambda:implemented.</code></pre></div>\n<p>この例で出てきたFunctionクラスは関数型インターフェースで、中には抽象メソッド <strong>R apply(T t)</strong> が定義されている(Tは引数の型、Rは返り値の型)。Functionクラスの変数宣言時にラムダ式を代入すると、そのラムダ式の定義が抽象メソッドapplyに適用される。<br>\n他の関数型インタフェースに対しても、同様にラムダ式を定義し代入することで利用できる。（他にどのような関数型インタフェースがあるかはここでは割愛する。）</p>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p><code class=\"language-text\">lambda (引数): (返す値、式)</code></p>\n<p>Pythonではキーワード <strong>lambda</strong> を使って定義することで無名関数が書ける。</p>\n<p>引数は何個でも設定できる。<br>\n特徴としてはlambdaの式は変数に格納することができる。<br>\nその変数に引数を指定して実行すると、lambdaに渡されて実行される。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">*</span>y\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">100</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> </code></pre></div>\n</div>","frontmatter":{"title":"ラムダ式（無名関数）","date":"October 20, 2019","description":"ラムダ式（無名関数）の定義について","tags":["Java","Python"]}}},"pageContext":{"id":"3e52dcce-6daf-5c57-b647-8026ca66fa34"}},"staticQueryHashes":["2841359383","3257411868"]}