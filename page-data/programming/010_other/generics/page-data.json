{"componentChunkName":"component---src-templates-note-js","path":"/programming/010_other/generics/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"953b4bdf-6fd0-5e8e-a809-84ba8dd77f3a","excerpt":"…","html":"<p>ジェネリクスについて。</p>\n<p>ジェネリクスとは、特定の型に制限されない、抽象的かつ汎用的なコードを記述するための機能である。</p>\n<p>変数の型を明記することが必要な言語では、変数を宣言するときにその変数の型名も書く必要があり、またその変数にはその型の値しかいれることができない。</p>\n<p>しかし、ジェネリクスを利用すると、引数の型は抽象的なものになり、様々な型の引数を渡すことが可能になる。</p>\n<p>言語による仕様を示す。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p>Javaでは<strong>ダイヤモンド演算子</strong>を使ってジェネリクスを宣言する。</p>\n<p>クラスを定義する時、及びジェネリクスを利用する変数を定義する時、型名の後ろに&#x3C;クラス名>というように宣言する。</p>\n<p>これにより、そのクラス、インスタンスを利用する時の引数にはその型の引数のみ利用できるようになる。</p>\n<p>インスタンス宣言時に利用できる型を定義できるので、結果としてそのクラスとしてはどの型のデータも利用することが可能になる。</p>\n<p>実際の利用例としては、Collectionsクラスを元としているListクラスやMapクラスがある。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>実際に利用する時はこのT,K,VをIntegerやStringなどの具体的な型にする。</p>\n<p>また、自分でクラスを定義するときもジェネリクスが利用できる。</p>\n<p>実装例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Gen</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//T型のフィールド変数t</span>\n    <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//T型の値を引数とする</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Swift\">\n<p>Swiftでは関数の定義時ジェネリクスを利用する。</p>\n<p>定義方法は&#x3C;>で囲い、その中に記述する。</p>\n<p>例を以下に記載する。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">min</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span></code></pre></div>\n<p>この例では、minという関数には引数が２つ、かつその両方は同じ型で返り値も同じ型、また利用する型はComparableプロトコルに準拠している物でなければならないという指定である。</p>\n<p>(・・後ほど追記します)</p>\n</div>","frontmatter":{"title":"ジェネリクス","date":"October 23, 2019","description":"正規表現を利用する方法について","tags":["Java","Swift"]}}},"pageContext":{"id":"953b4bdf-6fd0-5e8e-a809-84ba8dd77f3a"}},"staticQueryHashes":["2841359383","3257411868"]}