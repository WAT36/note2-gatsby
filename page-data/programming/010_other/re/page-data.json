{
    "componentChunkName": "component---src-templates-note-js",
    "path": "/programming/010_other/re/",
    "result": {"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"89b82a49-0220-58fa-8c57-bb6354ba3990","excerpt":"文字列に正規表現を適用してある文字列パターンを抽出・検索したいという場合があると思う。 その場合に利用する方法を示す。 ちなみに正規表現の文法についてはここでは割愛する。 Pythonでは正規表現を扱うreモジュールがある。\nこの中には色々関数があり、これらを利用して文字列パターンの抽出や検索を行う。 また、re…","html":"<p>文字列に正規表現を適用してある文字列パターンを抽出・検索したいという場合があると思う。</p>\n<p>その場合に利用する方法を示す。</p>\n<p>ちなみに正規表現の文法についてはここでは割愛する。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p>Pythonでは正規表現を扱う<strong>re</strong>モジュールがある。\nこの中には色々関数があり、これらを利用して文字列パターンの抽出や検索を行う。</p>\n<p>また、reを使う時、条件として使う正規表現も文字列として入力するが、正規表現で使う文字は特殊文字が多く、そのまま入力すると正規表現として認識してくれない時がある。\nそれを防ぐため、pythonの<strong>raw文字列</strong>を使って正規表現を書く。raw文字列を使うと、特殊文字を無視して一文字として扱ってくれるのでこの場合便利。使用法は文字列のクォーテーション(‘)の前にrを付ける。</p>\n<p>(例)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\Users\\Downloads'</span><span class=\"token punctuation\">)</span> \n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">unicode</span> error<span class=\"token punctuation\">)</span> <span class=\"token string\">'unicodeescape'</span> codec can't decode <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">in</span> position <span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span> truncated \\UXXXXXXXX escape\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># \\u はUnicode文字列として認識されてエラーになる</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\Users\\Downloads'</span><span class=\"token punctuation\">)</span> \nC<span class=\"token punctuation\">:</span>\\Users\\Downloads\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># \\Uも\\Dも特殊文字とは認識せずそのまま出力する</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<p>このraw文字列を使い、以下に正規表現の関数の例を示す。</p>\n<h2>正規表現の文字列を正規表現オブジェクトに変換する</h2>\n<p>pythonのreで正規表現を使うには、文字列で表した正規表現をそのまま使う方法と、正規表現オブジェクトに変換して使う方法の2つがある。<br>\nどちらでもよいが、正規表現の動作を何回も行わせるときは最初に文字列を正規表現オブジェクトに変換させてそれを繰り返し使わせた方が効率良く利用できる。</p>\n<p>文字列を正規表現オブジェクトに変換するには、reモジュールの<strong>compile</strong>関数を使う。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">re.compile(pattern, flags=0)</code></pre></div>\n<p>引数patternに文字列で表した正規表現を入れると、それに対応した正規表現オブジェクトを返してくれる。</p>\n<h2>正規表現を使って文字列を検索・抽出する</h2>\n<p>実際に正規表現を使って文字列から該当する部分を検索・抽出するにはどうすればよいのか？\nそれにはreモジュールの以下諸関数を利用する。</p>\n<table >\n<tr>\n<td style=\"border-style: none;\">・re.<b>search</b>(pattern, string, flags=0) </td>\n<td style=\"border-style: none;\">#stringで正規表現patternに最初にマッチした部分を返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・re.<b>match</b>(pattern, string, flags=0) </td>\n<td style=\"border-style: none;\">#stringの先頭が正規表現patternにマッチしていたらそれを返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・re.<b>fullmatch</b>(pattern, string, flags=0) </td>\n<td style=\"border-style: none;\">#string全体が正規表現patternにマッチしていたらそれを返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・re.<b>findall</b>(pattern, string, flags=0) </td>\n<td style=\"border-style: none;\">#string中で正規表現patternにマッチしているものをリストにして全て返す</td>\n</tr>\n</table>\n<p>いずれの関数も、もし該当する部分がない場合はNoneが返される。\nまた、これら諸関数の返り値は文字列ではなく、マッチオブジェクトと呼ばれる型のデータを返す(findallはリストを返す)。\nマッチオブジェクトから結果を取得したい場合は、以下の諸関数をさらに利用する。</p>\n<table>\n<tr>\n<td style=\"border-style: none;\">・Match.<b>start</b>()</td>\n<td style=\"border-style: none;\">#マッチした文字列の文字列中での最初のインデックスを返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・Match.<b>end</b>()</td>\n<td style=\"border-style: none;\">#マッチした文字列の文字列中での最後のインデックスを返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・Match.<b>span</b>()</td>\n<td style=\"border-style: none;\">#マッチした文字列が文字列中でどこからどこまでのインデックスなのかを返す</td>\n</tr>\n<tr>\n<td style=\"border-style: none;\">・Match.<b>group</b>()</td>\n<td style=\"border-style: none;\">#マッチした文字列を返す</td>\n</tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> re\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnoooppp\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pattern<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'd+'</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>     \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 \n<span class=\"token string\">'ddd'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#先頭(aaa...)に一致しないのでNone</span>\n<span class=\"token boolean\">None</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pattern<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'a+'</span><span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'aaa'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span>                                               \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pattern<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'a+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>fullmatch<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'aaa'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>  \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pattern<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'a'</span><span class=\"token punctuation\">)</span>    \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>   \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> </code></pre></div>\n<h2>正規表現を使って文字列を置換する</h2>\n<p>文字列中の正規表現に該当する箇所を別の文字列に置換するにはreモジュールの関数<strong>sub</strong>を使う。</p>\n<p><code class=\"language-text\">re.sub(pattern, repl, string, count=0, flags=0)</code></p>\n<p>この関数を使うと文字列stringの中で正規表現patternに該当する最も左の箇所をreplに置換した文字列を出力する。\n引数のcountには置換を行う最大回数(非負整数)を入力する。デフォルトは0だが、0の場合は回数制限なしに全てを置換する。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> re\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token operator\">=</span><span class=\"token string\">\"aaabbbcccdddeeefff\"</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'a+'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>   \n<span class=\"token string\">'Abbbcccdddeeefff'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>  \n<span class=\"token string\">'AAAbbbcccdddeeefff'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'aa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span> \n<span class=\"token string\">'Aabbbcccdddeeefff'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> </code></pre></div>\n</div>","frontmatter":{"title":"正規表現","date":"October 23, 2019","description":"正規表現を利用する方法について","tags":["Python"]}}},"pageContext":{"id":"89b82a49-0220-58fa-8c57-bb6354ba3990"}},
    "staticQueryHashes": ["2841359383","3257411868"]}