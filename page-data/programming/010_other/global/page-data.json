{"componentChunkName":"component---src-templates-note-js","path":"/programming/010_other/global/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"2b1b7240-c816-5d79-9909-87a20705750c","excerpt":"大域変数と局所変数（グローバルオブジェクトとCallオブジェクト） 大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）についてを述べる。 グローバルオブジェクトとCallオブジェクト Javascript…","html":"<h1>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）</h1>\n<p>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）についてを述べる。</p>\n<h2>グローバルオブジェクトとCallオブジェクト</h2>\n<p>Javascriptはスクリプトを読み込んだ時に、<strong>グローバルオブジェクト</strong>なるものを自動で生成する。グローバルオブジェクトはグローバルスコープを持ったグローバル変数やグローバル関数を管理する。</p>\n<p>同様に、関数を呼んだ時には<strong>Callオブジェクト</strong>が生成される。Callオブジェクトには関数のスコープ内での変数や関数が管理される。</p>\n<p>変数が参照された時、それが関数内でだった場合はその関数に対応したCallオブジェクトから変数を探し、無い場合はその上位のCallオブジェクト(あるいはグローバルオブジェクト)に変数を探していく。</p>\n<h2>グローバルオブジェクト</h2>\n<p>グローバルオブジェクトはブラウザが新しいページを読み込む時に自動で生成されるオブジェクトで、インスタンスの記述は不要である。関数やプロパティを参照する際も、インスタンス名の記述は不要である。</p>\n<p>代表的なグローバルオブジェクトは以下の通り。</p>\n<table style=\"border:none;\">\n    <thead>\n        <th style=\"border:none;\">オブジェクト名</th>\n        <th style=\"border:none;\">説明</th>\n    </thead>\n    <tr>\n        <td style=\"border:none;\">Array</td>\n        <td style=\"border:none;\">配列オブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Boolean</td>\n        <td style=\"border:none;\">真偽値オブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Date</td>\n        <td style=\"border:none;\">日付オブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Error</td>\n        <td style=\"border:none;\">エラーオブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">JSON</td>\n        <td style=\"border:none;\">JSONオブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Math</td>\n        <td style=\"border:none;\">Mathオブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Number</td>\n        <td style=\"border:none;\">数値オブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">Object</td>\n        <td style=\"border:none;\">オブジェクト</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">String</td>\n        <td style=\"border:none;\">文字列オブジェクト</td>\n    </tr>\n</table>\n<h2>グローバル関数</h2>\n<p>グローバル関数はグローバルオブジェクトに含まれる関数である（グローバルオブジェクトそのものでは無い）。グローバル関数はオブジェクトのインスタンス化不要で利用できる。</p>\n<p>代表的なグローバル関数は以下の通り。</p>\n<table style=\"border:none;\">\n    <thead>\n        <th style=\"border:none;\">関数名</th>\n        <th style=\"border:none;\">説明</th>\n    </thead>\n    <tr>\n        <td style=\"border:none;\">decodeURI()</td>\n        <td style=\"border:none;\">URIをデコード</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">decodeURIComponnent()</td>\n        <td style=\"border:none;\">URIの要素をデコード</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">encodeURI()</td>\n        <td style=\"border:none;\">URIをエンコード</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">encodeURIComponent()</td>\n        <td style=\"border:none;\">URIの要素をエンコード</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">escape()</td>\n        <td style=\"border:none;\">文字列を16進数文字列を変換</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">eval()</td>\n        <td style=\"border:none;\">文字列を評価する(演算)</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">isFinite()</td>\n        <td style=\"border:none;\">有限か否かを判定</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">isNaN()</td>\n        <td style=\"border:none;\">NaN(非数値)か否かを判定する</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">parseFloat()</td>\n        <td style=\"border:none;\">文字列を浮動小数点数に変換</td>\n    </tr>\n    <tr>\n        <td style=\"border:none;\">parseInt()</td>\n        <td style=\"border:none;\">文字列を整数に変換</td>\n    </tr>\n</table>\n<h2>クロージャ</h2>\n<p>Javascriptにおけるクロージャとは、関数と変数が一体となったデータ構造である。この構造により、変数の値を保持する処理を簡潔に記述することができる。</p>\n<p>関数内の変数は関数の処理が終わると破棄されるが、クロージャではガベージコレクションの対象とならず、変数への参照が残ったままになる。</p>\n<p>クロージャの例としては以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//クロージャ</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//c()を呼び出すごとにカウントアップ。クロージャなので値が残る</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n2\n3</code></pre></div>","frontmatter":{"title":"大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）","date":"October 23, 2019","description":"大域変数と局所変数について","tags":[]}}},"pageContext":{"id":"2b1b7240-c816-5d79-9909-87a20705750c"}},"staticQueryHashes":["2841359383","3257411868"]}