{"componentChunkName":"component---src-templates-note-js","path":"/programming/009_file_io/file_write/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"8538c211-6770-5400-b6ca-63c6ad9c0674","excerpt":"ファイルを書き込む方法についてを示す。 読み込み時と同様に、ここではテキストファイルなど一般的なファイルに対する読み込み方法についてを示す。 Javaでファイルを書き込むには以下の2つの方法がある。 java.io. FileOutputStream クラスを利用する java.io. FileWriter…","html":"<p>ファイルを書き込む方法についてを示す。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p>読み込み時と同様に、ここではテキストファイルなど一般的なファイルに対する読み込み方法についてを示す。</p>\n<p>Javaでファイルを書き込むには以下の2つの方法がある。</p>\n<ul>\n<li>java.io. <strong>FileOutputStream</strong> クラスを利用する</li>\n<li>java.io. <strong>FileWriter</strong> クラスを利用する</li>\n</ul>\n<p>それぞれについて示す。</p>\n<h2>FileOutputStream</h2>\n<p>FileOutputStreamクラスはファイルからbyte単位で書き込みを行うストリームである。<br>\nFileInputStreamと同様に、このクラスは宣言時(コンストラクタ)にString型でファイルのパスまたはFile型のオブジェクトを入力する。Fileクラスは宣言時(コンストラクタ)にファイルのパス(相対パス)を文字列型で入力してできるオブジェクトである。これにより、このファイルへの出力ストリームが得られる。</p>\n<p><code class=\"language-text\">FileOutputStream(String name) throws FileNotFoundException</code></p>\n<p><code class=\"language-text\">FileOutputStream(File file) throws FileNotFoundException</code></p>\n<p>作成した入力ストリームからバイトデータを書き込むメソッドとして、**write()**というメソッドがある。</p>\n<p><code class=\"language-text\">void write(int b) throws IOException</code></p>\n<p><code class=\"language-text\">void write(byte[] b) throws IOException</code></p>\n<p>このメソッドは引数で指定されたバイトデータをファイル出力ストリームに書き出すメソッドである。<br>\nFileOutputStreamクラスではこのメソッドを利用してファイルを書き込む。</p>\n<p>また、書き込みが終わったら入力時と同様にして、出力ストリームを閉じる**close()**メソッドを忘れずに行う。</p>\n<p>FileOutputStreamのjava実装例を示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n      fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testwrite.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testwrite\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行例は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls *.txt\n$ \n$ javac Main.java\n$ java Main\n$ ls *.txt\ntestwrite.txt\n$ cat testwrite.txt \ntestwritec$ </code></pre></div>\n<h2>FileWriterクラス</h2>\n<p>FileWriterクラスはファイルからchar単位で書き込みを行う出力ストリームである。<br>\nこのクラスもFileOutputStreamクラスと同様に、宣言時(コンストラクタ)にFile型のオブジェクトを入力する。これにより、このファイルからの入力ストリームが得られる。</p>\n<p><code class=\"language-text\">FileWriter(File file) throws FileNotFoundException</code></p>\n<p><code class=\"language-text\">FileWriter(String name) throws FileNotFoundException</code></p>\n<p>作成した出力ストリームでバイトデータを書き込むメソッドとして、こちらも**write()**というメソッドがある。</p>\n<p><code class=\"language-text\">void write(String str) throws IOException</code></p>\n<p>このメソッドは引数に入力した文字列をバッファに書き込むメソッドである。<br>\nこの時点ではバッファへの書き込みなので、ファイルへの書き込みは行われていない。<br>\nファイルに書き込むにはここから、**flush()**というメソッドを利用して書き込む。</p>\n<p><code class=\"language-text\">void flush() throws IOException</code></p>\n<p>FileWriterクラスではこれらのメソッドを利用して書き込みを行う。</p>\n<p>また、読み込みが終わったらこちらも入力ストリームを閉じる**close()**メソッドを忘れずに行う。</p>\n<p>FileWriterのjava実装例を示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n      fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testwrite.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"テスト\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2行目\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行例は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls\n$ javac Main.java\n$ \n$ ls *.txt\ntestwrite.txt\n$ cat testwrite.txt \ntestwritec$ \n$ javac Main.java\n$ java Main\n$ cat testwrite.txt \nテスト2行目 $ </code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p>Pythonでは関数openでファイルを開いた後、ファイルオブジェクトの関数 <strong>write()</strong> を利用してファイルを書き込む。</p>\n<p><code class=\"language-text\">write(文字列)</code></p>\n<p>ファイルへの書き込みを行う際にはopenで開く時にモードを <strong>‘w’</strong> または <strong>‘a’</strong> と必ず指定する。それ以外の時はwrite関数実行時にエラーになる。\nモードが’w’のときはファイルに上書きされ、‘a’の時はファイルの末尾に追記される形で書き込まれる。</p>\n<p>こちらも読み込みの時と同様に、作業が終わったら最後にファイルオブジェクトの関数 <strong>close()</strong> を利用してファイルをクローズする。</p>\n<p>また、書き込みにおいても <strong>with</strong> 文が利用できる。with文を抜け出したとき、自動でファイルクローズも行うので便利。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ファイル名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'モード'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'ファイルに書き込む文字列'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>実行例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ ls\ntest<span class=\"token punctuation\">.</span>txt\n$ cat test<span class=\"token punctuation\">.</span>txt\naaa\nbbb\nccc\nddd\n$ python\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\">#'w'のときは上書きされて書き込まれる</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'overwrote!!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ cat test<span class=\"token punctuation\">.</span>txt\noverwrote!!\n\n$ python\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># 'a'の時はファイルの末尾から追記される形で書き込まれる</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'ccc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ cat test<span class=\"token punctuation\">.</span>txt\noverwrote!!aaabbbccc\n\n$ python\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># with文を使って書き込む</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'use with and overwrite'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">22</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ cat test<span class=\"token punctuation\">.</span>txt\nuse <span class=\"token keyword\">with</span> <span class=\"token keyword\">and</span> overwrite</code></pre></div>\n<p>{{&#x3C; /tab >}}\n{{&#x3C; /tabs >}}</p>","frontmatter":{"title":"ファイル書き込み","date":"October 22, 2019","description":"ファイルを書き込む方法について","tags":["Java","Python"]}}},"pageContext":{"id":"8538c211-6770-5400-b6ca-63c6ad9c0674"}},"staticQueryHashes":["2841359383","3257411868"]}