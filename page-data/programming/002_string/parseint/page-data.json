{"componentChunkName":"component---src-templates-note-js","path":"/programming/002_string/parseint/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"61d392a5-b438-5b7c-a5ef-bd6dc6951216","excerpt":"文字列型データで定義された数字を数値型データに変換する方法を述べる。 ちなみに、逆の数値を文字列型にする方法もある。 クラスはここではMain.javaとする Javaでは各数値型のラッパークラスに parsexxx(String s) というメソッドがあり、これにより文字列を数値リテラルに変換してくれる。 int…","html":"<p>文字列型データで定義された数字を数値型データに変換する方法を述べる。<br>\nちなみに、逆の数値を文字列型にする方法もある。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p>クラスはここではMain.javaとする</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Javaでは各数値型のラッパークラスに <strong>parsexxx(String s)</strong> というメソッドがあり、これにより文字列を数値リテラルに変換してくれる。<br>\nint型の場合はintのラッパークラスIntegerに <strong>parseInt</strong> というメソッドがあり、そのメソッドに文字列を入力すると、対応する数値に変換してくれる。上記例では”1”という文字列をparseIntに入力すると、int型(数値リテラル)の1が返る。<br>\n数値リテラルに変換できないような文字列を入力すると<code class=\"language-text\">NumberFormatException</code>という例外エラーが発生する。</p>\n<p>他の数値型に変換したいときは、それぞれ対応するラッパークラスにparsexxメソッドがあるのでそれを活用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"1\"をLong型に変換</span>\n      <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"1\"をByte型に変換</span>\n\n      <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"1\"をDouble型に変換</span>\n      <span class=\"token keyword\">float</span>  f <span class=\"token operator\">=</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"1\"をFloat型に変換</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p>Pythonで数値の文字列を数値リテラルに変換したい時は組み込み関数の <strong>int()</strong> や <strong>float()</strong> を利用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">#'1'</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1.0</span></code></pre></div>\n<p>数値リテラルに変換できないような文字列を入力したときは、例外<code class=\"language-text\">ValueError</code>を返す。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>s <span class=\"token operator\">=</span> <span class=\"token string\">\"+\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>s <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nValueError<span class=\"token punctuation\">:</span> invalid literal <span class=\"token keyword\">for</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">with</span> base <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'+'</span></code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Javascript\">\n<p>Javascriptで数値の文字列を数値型に変換したい時は、</p>\n<p>関数 <strong>Number()</strong> 、 <strong>parseInt()</strong> 、 <strong>parseFloat()</strong> を利用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//文字列->数値に変換</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n1\n1\n1</code></pre></div>\n<p>(ログだと分からんか・・)</p>\n</div>","frontmatter":{"title":"数値型に変換する","date":"October 12, 2019","description":"文字列を数値型データに変換する方法。","tags":["Java","Python","Javascript"]}}},"pageContext":{"id":"61d392a5-b438-5b7c-a5ef-bd6dc6951216"}},"staticQueryHashes":["2841359383","3257411868"]}