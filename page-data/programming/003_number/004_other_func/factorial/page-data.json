{
    "componentChunkName": "component---src-templates-note-js",
    "path": "/programming/003_number/004_other_func/factorial/",
    "result": {"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"885b44d3-bed8-5461-8862-16f1caf25fc6","excerpt":"階乗計算についてを示す。 基本、階乗計算はn * n-1 * n-2 * … * 1を地道にやっていく計算量O(n)の計算を行うので、時間がかかりやすいという特徴がある。 Java…","html":"<p>階乗計算についてを示す。<br>\n基本、階乗計算はn * n-1 * n-2 * … * 1を地道にやっていく計算量O(n)の計算を行うので、時間がかかりやすいという特徴がある。</p>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Java\">\n<p>Javaには階乗計算を行うライブラリは現時点ではない（はず。広ーく探せばもしかしたら存在するかもしれないが）。<br>\nそのため、独自で階乗計算を行うメソッドを実装する必要がある。<br>\n階乗計算を行う上で有名なのが、再帰を使った方法である。実装例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再帰計算を用いることにより、上記メソッドfactorial(n)はn!を意味する。\n実行例を下記に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Math</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>実行結果</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> java Main\n1\n120\n3628800</code></pre></div>\n<p>但し、再帰計算は線形的に計算を行うため、計算量もO(n)となり、大きな数を入力すると計算に時間がかかる。<br>\n上記メソッドfactorialは引数n以下の全ての数字の階乗の結果も計算するので、複数回計算を行う場合にはそれまでの計算結果も別の配列などに保存しておくと、階乗計算が1回で済むので計算時間もいくらか短縮される（これでも足りない場合もあるが）</p>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Python\">\n<p>pythonにはmathモジュールに階乗計算を行う関数<strong>factorial()</strong>  があるのでこれを利用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> math\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span>       \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> math<span class=\"token punctuation\">.</span>factorial<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> math<span class=\"token punctuation\">.</span>factorial<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token number\">120</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> math<span class=\"token punctuation\">.</span>factorial<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3628800</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n</div>\n<div class=\"note_content_by_programming_language\" id=\"note_content_Javascript\">\n<p>Javascriptにも階乗計算を行うライブラリは現時点ではない（はず）。\nそのため、独自で階乗計算を行うメソッドを実装する必要がある。<br>\n階乗計算を行う上で有名なのが、再帰を使った方法である。実装例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>再帰計算を用いることにより、上記メソッドfactorial(n)はn!を意味する。\n実行結果は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n120\n3628800</code></pre></div>\n</div>","frontmatter":{"title":"階乗","date":"October 12, 2019","description":"階乗計算をする方法。","tags":["Java","Python","Javascript"]}}},"pageContext":{"id":"885b44d3-bed8-5461-8862-16f1caf25fc6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}