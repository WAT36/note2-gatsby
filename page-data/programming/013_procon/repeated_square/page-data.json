{"componentChunkName":"component---src-templates-note-js","path":"/programming/013_procon/repeated_square/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"e6c49fc5-66a1-522e-8d31-c30938c6e366","excerpt":"例えば、210100を計算しようとした時、単純にループで１回ずつ掛け算していくと計算にかなりの時間を要してしまう。 ループで一つずつ計算した場合、xnを求めるための計算量はO(n)となる。 この計算量を少しでも減らす方法は無いのだろうか。 その方法の一つとしてあるのが、繰り返し二乗法である。 これは、まずxを２乗してx…","html":"<p>例えば、2<sup>10<sup>100</sup></sup>を計算しようとした時、単純にループで１回ずつ掛け算していくと計算にかなりの時間を要してしまう。</p>\n<p>ループで一つずつ計算した場合、x<sup>n</sup>を求めるための計算量はO(n)となる。</p>\n<p>この計算量を少しでも減らす方法は無いのだろうか。</p>\n<p>その方法の一つとしてあるのが、<strong>繰り返し二乗法</strong>である。</p>\n<p>これは、まずxを２乗してx<sup>2</sup>を、次にx<sup>2</sup>を２乗してx<sup>4</sup>を、さらにx<sup>4</sup>を２乗してx<sup>8</sup>を・・を繰り返していくことで、x<sup>2<sup>i</sup></sup>を求める。</p>\n<p>次に、nを2進数で表し、i桁目が1になっているものに対して、x<sup>2<sup>i</sup></sup>を掛け合わせていく。それの最終的な結果が、x<sup>n</sup>となる。</p>\n<p>これにより、計算量はO(log<sub>2</sub>n)まで削減できる。</p>\n<p>しかし、注意して欲しいのが、いくらこの方法で計算量は削減できると言っても、かなり大きな数を計算しようとした時は、大きな数同士の掛け算を何回かすることにより計算時間がかかってしまうことに変わりはないということである。</p>\n<p>競技プログラミングでは大きな数を計算するときに「1000000007で割った余りを求めよ」と指定されていることが多い。このようにすることで1000000007以下の数字のみ計算に使用することになるので、計算量は通常よりも削減可能になる。そのため、繰り返し二乗法の計算には、途中で剰余を求める計算も組み入れることが多い。</p>\n<p><a href=\"https://github.com/WAT36/python/blob/master/procon/repeated_square.py\">コード</a>例を以下に示す。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#x^nを繰り返し二乗法で求める関数</span>\n<span class=\"token comment\">#結果が大きくなるような数を入力すると大きすぎる数を計算しようとしてエラーになりやすい</span>\n\n<span class=\"token comment\">#実際に使うときは、MOD=10000007 などの剰余計算を組み込んで使うこと！</span>\nMOD<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">7</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">repeated_square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#nを2進数で表して順序反転</span>\n    bit_n<span class=\"token operator\">=</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    ans<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n    ni<span class=\"token operator\">=</span>x\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bit_n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ans<span class=\"token operator\">*=</span>ni\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bit_n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ni<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ni<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ni<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MOD\n\n        <span class=\"token comment\">#i桁目が1なら、x^(2^i)を加える</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bit_n<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ans<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ni<span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MOD\n\n    <span class=\"token keyword\">return</span> ans</code></pre></div>","frontmatter":{"title":"繰り返し二乗法","date":"November 03, 2019","description":"","tags":[]}}},"pageContext":{"id":"e6c49fc5-66a1-522e-8d31-c30938c6e366"}},"staticQueryHashes":["2841359383","3257411868"]}