{"componentChunkName":"component---src-templates-note-js","path":"/programming/013_procon/003_graph/warshall_floyd/","result":{"data":{"site":{"siteMetadata":{"title":"WAT Note(II)"}},"markdownRemark":{"id":"3a7a73be-e4ff-5fac-851f-5c77151f28ea","excerpt":"経路探索アルゴリズムの一つ「ワーシャル・フロイド法」についてを調べてみた。 ワーシャル・フロイド法とは、グラフのある頂点からある頂点までの最短経路を全ての組み合わせにおいて探索するアルゴリズムである。 入力 グラフ G = (V,E) Eの各辺の重み(コスト) 出力 全ての頂点i,j(∈V…","html":"<p>経路探索アルゴリズムの一つ「ワーシャル・フロイド法」についてを調べてみた。</p>\n<p>ワーシャル・フロイド法とは、グラフのある頂点からある頂点までの最短経路を全ての組み合わせにおいて探索するアルゴリズムである。</p>\n<ul>\n<li>入力</li>\n<li>グラフ G = (V,E)</li>\n<li>Eの各辺の重み(コスト)</li>\n<li>出力</li>\n<li>全ての頂点i,j(∈V)における最短経路</li>\n</ul>\n<h1>アルゴリズム</h1>\n<p>アルゴリズムは以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">V = (頂点の数)\nd[V][V]     // d[i][j]は頂点iから頂点jまでにかかるコスト。経路が存在しない場合はINF、i==jの時は0で初期化する\nd ← E       // dに辺Eの長さを反映させる (d[i][j]にEの長さを入れる)\n\nfor(a = 0;a = V;a++){\n    for(b = 0;b &lt; V;b++){\n        for(c = 0;c &lt; V;c++){\n            d[b][c] = min(d[b][c], d[b][a] + d[a][c])\n        }\n    }\n}\n\nreturn d</code></pre></div>\n<p>考え方としては、頂点iからグラフGの頂点それぞれを経由して頂点jまで行く計|V|通りの経路を調べ、調べた|V|通りのパターンの中から最小のコストを取り出したものが、頂点iから頂点jへの最小コストとなる。<br>\nこれを全ての(i,j)の組み合わせにおいて調べることで、グラフGの全ての頂点間の最小コストを調べられる。全体の計算量はO(|V|<sup>3</sup>)となる。</p>","frontmatter":{"title":"ワーシャル・フロイド法","date":"November 02, 2019","description":"","tags":[]}}},"pageContext":{"id":"3a7a73be-e4ff-5fac-851f-5c77151f28ea"}},"staticQueryHashes":["2841359383","3257411868"]}