{"version":3,"file":"component---src-templates-note-dir-js-9f13eec77995014d8861.js","mappings":"uJAyCA,IA/BY,WAAO,IAAD,EAkBVA,EAAM,WAjBCC,EAAAA,EAAAA,gBAAe,cAiBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,QACZJ,MAAAA,OAAA,EAAAA,EAAQK,OACP,uCACa,8BAASL,EAAOK,MAD7B,KAC6CL,MAAAA,OAAA,EAAAA,EAAQM,UAAW,S,uHClClEC,EAAAA,aAAAA,EAKKC,YAAc,CAEjB,UAAa,OACb,YAAa,UACb,YAAc,UAGd,MAAa,OAOrB,QCoFA,EA9FwB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQF,EAAKG,aAAaC,MAC1BC,EAAML,EAAKM,kBAAkBF,MAC7BG,GAAY,UAAAP,EAAKP,KAAKC,oBAAV,eAAwBc,QAAxB,QAIlB,OAAqB,IAAjBN,EAAMO,QAA+B,IAAfJ,EAAII,OAE1B,gBAAC,IAAD,CAAQR,SAAUA,EAAUO,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,UACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQP,SAAUA,EAAUO,MAAOD,GACjC,sBAAIZ,UAAU,gBAAd,SACA,gBAAC,IAAD,CAAKa,MAAM,UACX,gBAAC,IAAD,MACA,sBAAIE,MAAO,CAAEC,UAAU,SACpBT,EAAMU,KAAI,SAAAC,GACT,IAAML,EAAQV,EAAAA,YAAsBe,EAAKjB,OAASiB,EAAKjB,KAEvD,OACE,sBAAIkB,IAAKD,EAAKjB,MACZ,2BACED,UAAU,iBACVoB,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAI,UAAYL,EAAKM,aAAcC,SAAS,OAChD,wBAAMA,SAAS,YAAYZ,MAKjC,sCAaV,sBAAIE,MAAO,CAAEC,UAAU,SACpBN,EAAIO,KAAI,SAAAS,GACP,IAAMb,EAAQa,EAAGC,YAAYd,OAASa,EAAGE,OAAOC,KAEhD,OACE,sBAAIV,IAAKO,EAAGE,OAAOC,MACjB,2BACE7B,UAAU,iBACVoB,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIG,EAAGE,OAAOC,KAAMJ,SAAS,OACjC,wBAAMA,SAAS,YAAYZ,KAG/B,6BAAQa,EAAGC,YAAYG,OAEzB,+BACE,qBACEC,wBAAyB,CACvBC,OAAQN,EAAGC,YAAYM,aAAeP,EAAGQ,SAE3CT,SAAS","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/common/constants.js","webpack://gatsby-starter-blog/./src/templates/note-dir.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","class Constants {\n\n    /**\n     * ディレクトリ名\n     */\n    static noteDirName = {\n        //各ディレクトリ\n        \"container\" :\"コンテナ\",\n        \"front-end\" :\"フロントエンド\",\n        \"programming\":\"プログラミング\",\n\n        //プログラミング以下\n        \"stdio\"     :\"入出力\"\n    }\n\n\n\n}\n\nexport default Constants;","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nimport Constants from \"../common/constants\"\n\nconst NoteDirTemplate = ({ data, location }) => {\n  const posts = data.allDirectory.nodes\n  const mds = data.allMarkdownRemark.nodes\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  // const { previous, next } = data\n\n\n  if (posts.length === 0 && mds.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"notes\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1 className=\"main-heading\">Notes</h1>\n      <Seo title=\"notes\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = Constants.noteDirName[post.name] || post.name\n\n          return (\n            <li key={post.name}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={\"/notes/\" + post.relativePath} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  {/* <small>{post.frontmatter.date}</small> */}\n                </header>\n                <section>\n                  {/* <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  /> */}\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <ol style={{ listStyle: `none` }}>\n        {mds.map(md => {\n          const title = md.frontmatter.title || md.fields.slug\n\n          return (\n            <li key={md.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={md.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{md.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: md.frontmatter.description || md.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default NoteDirTemplate\n\nexport const pageQuery = graphql`\n  query NoteDirBySlug(\n    $absolutePath: String\n    $markdownRegexPath: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allDirectory(filter: {dir: { eq: $absolutePath }}) {\n      nodes {\n        absolutePath\n        id\n        relativePath\n        dir\n        name\n      }\n    }\n    allMarkdownRemark(filter: {fileAbsolutePath: {regex: $markdownRegexPath}}, sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","name","summary","Constants","noteDirName","data","location","posts","allDirectory","nodes","mds","allMarkdownRemark","siteTitle","title","length","style","listStyle","map","post","key","itemScope","itemType","Link","to","relativePath","itemProp","md","frontmatter","fields","slug","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}